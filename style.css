document.addEventListener('DOMContentLoaded', () => {
    // DOM Elements
    const authContainer = document.getElementById('auth-container');
    const chatContainer = document.getElementById('chat-container');
    const googleLoginBtn = document.getElementById('google-login');
    const logoutBtn = document.getElementById('logout-btn');
    const messageInput = document.getElementById('message-input');
    const sendBtn = document.getElementById('send-btn');
    const messagesContainer = document.getElementById('messages');
    const userAvatar = document.getElementById('user-avatar');
    const usernameSpan = document.getElementById('username');
    const notificationSound = document.getElementById('notification-sound');
    const fileUploadInput = document.getElementById('file-upload'); // New: File upload input

    // Firebase references
    const {
        auth,
        provider,
        database,
        ref,
        push,
        onValue,
        off,
        set,
        signInWithPopup,
        signOut,
        onAuthStateChanged
    } = window.firebase;

    const messagesRef = ref(database, 'messages');

    // Pixeldrain API Key (WARNING: Exposing API keys client-side is a security risk)
    const PIXELDRAIN_API_KEY = "58156ee7-6623-4205-8a51-0bc57bdb480a"; // Replace with your actual Pixeldrain API Key

    // Monitor login status
    onAuthStateChanged(auth, (user) => {
        if (user) {
            handleUserLogin(user);
        } else {
            handleUserLogout();
        }
    });

    // Event Listeners
    googleLoginBtn?.addEventListener('click', signInWithGoogle);
    logoutBtn?.addEventListener('click', signOutUser);
    sendBtn?.addEventListener('click', sendMessage);
    messageInput?.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') sendMessage();
    });
    fileUploadInput?.addEventListener('change', handleFileUpload); // New: File upload change event

    // Functions
    function signInWithGoogle() {
        signInWithPopup(auth, provider).catch((error) => {
            console.error('Error during sign in:', error);
            alert('Sign in failed. Please try again.');
        });
    }

    function signOutUser() {
        signOut(auth).catch((error) => {
            console.error('Error during sign out:', error);
        });
    }

    function handleUserLogin(user) {
        authContainer.classList.add('hidden');
        chatContainer.classList.remove('hidden');
        userAvatar.src = user.photoURL || '';
        usernameSpan.textContent = formatName(user.displayName || 'Anonymous');
        loadMessages();
    }

    function handleUserLogout() {
        chatContainer.classList.add('hidden');
        authContainer.classList.remove('hidden');
        messagesContainer.innerHTML = '';
        off(messagesRef);
    }

    function loadMessages() {
        onValue(messagesRef, (snapshot) => {
            messagesContainer.innerHTML = '';
            const messages = snapshot.val();
            if (messages) {
                Object.keys(messages).forEach((key) => {
                    displayMessage(messages[key]);
                });

                // Scroll to bottom
                setTimeout(() => {
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                }, 100);
            }
        });
    }

    function displayMessage(message) {
        const currentUser = auth.currentUser;
        const isOwnMessage = message.userId === currentUser?.uid;

        const messageElement = document.createElement('div');
        messageElement.className = `message ${isOwnMessage ? 'own-message' : ''}`;

        // Play sound for messages not from current user
        if (!isOwnMessage && notificationSound) {
            notificationSound.currentTime = 0;
            notificationSound.play().catch(e => console.log('Sound play failed:', e));
        }

        const headerHTML = `
            <span class="message-sender">${formatName(message.name)}</span>
            <span class="message-time">${formatTime(message.timestamp)}</span>
        `;

        let messageContentHTML = `<div class="message-text">${escapeHTML(message.text || '')}</div>`;

        // New: Handle file messages
        if (message.file) {
            const fileName = message.file.name;
            const fileLink = message.file.url;
            const fileType = message.file.type;

            if (fileType.startsWith('image/')) {
                messageContentHTML = `
                    <div class="message-text">
                        <a href="${fileLink}" target="_blank" rel="noopener noreferrer">
                            <img src="${fileLink}" alt="${fileName}" class="uploaded-image"/>
                        </a>
                        <p>${escapeHTML(message.text || '')}</p>
                    </div>
                `;
            } else if (fileType.startsWith('video/')) {
                 messageContentHTML = `
                    <div class="message-text">
                        <video controls class="uploaded-video">
                            <source src="${fileLink}" type="${fileType}">
                            Your browser does not support the video tag.
                        </video>
                        <p>${escapeHTML(message.text || '')}</p>
                    </div>
                `;
            }
            else {
                messageContentHTML = `
                    <div class="message-text">
                        <a href="${fileLink}" target="_blank" rel="noopener noreferrer" class="file-link">
                            <i class="fas fa-file"></i> ${escapeHTML(fileName)}
                        </a>
                        <p>${escapeHTML(message.text || '')}</p>
                    </div>
                `;
            }
        }

        messageElement.innerHTML = `
            <img class="message-avatar" src="${message.photoURL}" alt="${message.name}">
            <div class="message-content">
                <div class="message-header">
                    ${headerHTML}
                </div>
                ${messageContentHTML}
            </div>
        `;

        messagesContainer.appendChild(messageElement);

        const isNearBottom = messagesContainer.scrollHeight - messagesContainer.scrollTop - messagesContainer.clientHeight < 100;
        if (isNearBottom) {
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
    }

    async function handleFileUpload(event) {
        const file = event.target.files[0];
        if (!file) return;

        if (file.size > 50 * 1024 * 1024) { // 50 MB limit
            alert('File size exceeds 50MB limit.');
            fileUploadInput.value = ''; // Clear the input
            return;
        }

        const formData = new FormData();
        formData.append('file', file);

        try {
            // Upload to Pixeldrain
            const resp = await fetch("https://pixeldrain.com/api/file", {
                method: "POST",
                headers: {
                    "Authorization": "Basic " + btoa(":" + PIXELDRAIN_API_KEY),
                },
                body: formData,
            });

            if (!resp.ok) {
                const errorData = await resp.json();
                throw new Error(`Pixeldrain upload failed: ${errorData.message || resp.statusText}`);
            }

            const result = await resp.json();
            if (result.success) {
                const fileUrl = `https://pixeldrain.com/api/file/${result.id}`;
                sendMessage(null, {
                    name: file.name,
                    url: fileUrl,
                    type: file.type,
                    size: file.size
                });
            } else {
                throw new Error(`Pixeldrain API reported an error: ${result.message}`);
            }

        } catch (error) {
            console.error('Error uploading file:', error);
            alert(`File upload failed: ${error.message}. Please try again.`);
        } finally {
            fileUploadInput.value = ''; // Clear the input regardless of success or failure
        }
    }


    function sendMessage(event, fileData = null) {
        const text = messageInput.value.trim();
        if (text === '' && !fileData) return;

        const user = auth.currentUser;
        const newMessage = {
            name: user.displayName,
            userId: user.uid,
            photoURL: user.photoURL,
            timestamp: Date.now()
        };

        if (text) {
            newMessage.text = text;
        }
        if (fileData) {
            newMessage.file = fileData;
        }

        push(messagesRef, newMessage)
            .then(() => {
                messageInput.value = '';
            })
            .catch((error) => {
                console.error('Error sending message:', error);
                alert('Failed to send message. Try again.');
            });
    }

    function formatTime(timestamp) {
        const date = new Date(timestamp);
        return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    }

    function escapeHTML(str) {
        return str.replace(/[&<>'"]/g, (tag) => ({
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            "'": '&#39;',
            '"': '&quot;'
        }[tag]));
    }

    function formatName(fullName) {
        if (!fullName) return 'Anonymous';
        const parts = fullName.trim().split(' ');
        return parts.slice(0, 2).join(' ');
    }
});
